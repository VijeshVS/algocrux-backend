generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String              @id @default(cuid())
  name            String
  email           String              @unique
  password        String
  contestsCreated Contest[]           @relation("CreatedContests")
  submissions     Submission[]
  problemsSolved  UserProblemMap[]
  createdAt       DateTime            @default(now())
}

model Contest {
  id          String    @id @default(cuid())
  name        String
  createdBy   User      @relation("CreatedContests", fields: [createdById], references: [id])
  createdById String
  startTime   DateTime
  duration    Int       // in minutes
  problems    Problem[]
  createdAt   DateTime  @default(now())
}

model Problem {
  id               String             @id @default(cuid())
  name             String
  description String
  constrains String[]
  topics String[]
  sampleTestCases  Json               // visible to frontend
  testCasesPath    String?             // path or URL to hidden test cases file
  timeLimit        Float              // in seconds
  memoryLimit      Int                // in MB
  points           Int
  contest          Contest            @relation(fields: [contestId], references: [id])
  contestId        String
  submissions      Submission[]
  solvedBy         UserProblemMap[]
  createdAt        DateTime           @default(now())
}

model UserProblemMap {
  user       User    @relation(fields: [userId], references: [id])
  userId     String

  problem    Problem @relation(fields: [problemId], references: [id])
  problemId  String
  
  createdAt  DateTime @default(now())
  @@id([userId, problemId])
}

model Submission {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  problem    Problem  @relation(fields: [problemId], references: [id])
  problemId  String

  code       String
  language   String   // e.g. "cpp", "python", "java"
  verdict    String   // "AC", "WA", "TLE", "MLE", etc.
  execTime   Float?   // optional, in seconds
  memoryUsed Int?     // optional, in MB
  createdAt  DateTime @default(now())
}
